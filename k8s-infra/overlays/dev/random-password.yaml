# 1st - External Secrets Operators generates a random secret, and saves it into k8s cluster
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: demo-postgres-dev-password-request
  namespace: dev
  annotations:
    # argocd.argoproj.io/hook: "PreSync"
    argocd.argoproj.io/sync-wave: "-20"
    argocd.argoproj.io/sync-options: Prune=false # Cannot delete the secret because XPGDatabase will not reconcile
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded
    # argocd.argoproj.io/sync-options: PruneLast=true
spec:
  length: 12
  noUpper: false # allow the use of Upper Case chars
  allowRepeat: true # allow the use of repeated chars
---
# 2ns - ESO will fetch the above generator, and creates a new Secret: kind
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: demo-postgres-dev-password-generator
  namespace: dev
  annotations:
    # argocd.argoproj.io/hook: "PreSync"
    argocd.argoproj.io/sync-wave: "-20"
    argocd.argoproj.io/sync-options: Prune=false # Cannot delete the secret because XPGDatabase will not reconcile
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded
    # argocd.argoproj.io/sync-options: PruneLast=true
spec:
  refreshInterval: "0" #"30m" # or "0" if no need to refresh/re-generate
  dataFrom:
    # what generator to reference:
    - sourceRef:
        generatorRef:
          apiVersion: generators.external-secrets.io/v1alpha1
          kind: Password
          name: demo-postgres-dev-password-request # ref the above kind: Password.meta.name
  # The name of the Secret to create in the cluster
  target:
    name: demo-postgres-dev-db-secret # kind: Secret that will exist at the end, by default the Key is "password"
    # DeletionPolicy defines how/when to delete the Secret in Kubernetes
    # if the provider secret gets deleted.
    # Valid values are Delete, Merge, Retain
    deletionPolicy: "Delete"
#
# ---
# antes eu estava a criar com gha e a colocar no azure kv - depois o eso lia de l√°
#
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: demo-postgres-db-external-secret
#   namespace: idp-dev
# spec:
#   refreshInterval: 1m
#   secretStoreRef:
#     kind: ClusterSecretStore
#     name: eso-azure-secret-store
#   # target = describes the secret that shall be created
#   target: # is the kind: Secret to be created using the values fetched from our Cloud Secret Store
#     name: demo-postgres-dev-db-secret # secret name to be created (default is metadata.name)
#   #   creationPolicy: Owner # opts: Owner | Merge | None
#   #   deletionPolicy: Retain # opts: Delete | Merge | Retain = what to do with this if the provider secret gets deleted.
#   # #
#   # from where to fetch data...
#   data: # when I know the secret key name to ref
#     - secretKey: demo-postgres-dev-db-password #DB_PASSWORD # key to hold value inside demo-postgres-db-secret
#       remoteRef: # key inside cloud secret store, to read from
#         key: demo-postgres-dev-db-password
# #
